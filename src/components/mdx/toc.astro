---
import { cn } from "@/lib/utils";

export type Props = {
    headings: Array<{ depth: number; text: string; slug: string }>;
};
const { headings } = Astro.props;
---

<div id="toc" class="">
    <nav class="">
        <h2 class="mb-4 font-medium uppercase tracking-widest">
            Table of content
        </h2>
        <ul class="space-y-4 text-sm">
            {
                headings.map((h) => {
                    return (
                        h.depth < 4 && (
                            <li
                                class={cn(
                                    "text-zinc-600 hover:text-zinc-500 dark:text-zinc-300 dark:hover:text-zinc-100",
                                    h.depth === 2 && "text-[15px] ",
                                    h.depth === 3 && "ml-4 text-[14px]"
                                )}
                            >
                                <a href={`#${h.slug}`} class="line-clamp-1">
                                    {h.text}
                                </a>
                            </li>
                        )
                    );
                })
            }
        </ul>
    </nav>
</div>

<style>
    .active {
        @apply font-medium text-red-400;
    }
</style>
<script>
    const setCurrent: IntersectionObserverCallback = (entries) => {
        console.log(entries);
        for (let entry of entries) {
            const { id } = entry.target;

            const tocHeadingEl = document.querySelector(
                `#toc a[href="#${id}"]`
            );

            if (!tocHeadingEl) return;

            if (entry.isIntersecting) {
                document
                    .querySelectorAll("#toc a")
                    .forEach((e) => e.classList.remove("active"));
                tocHeadingEl.classList.add("active");
            }
        }
    };

    const observerOption: IntersectionObserverInit = {
        rootMargin: " 0px 0px -72%",
        threshold: 1,
    };
    const headingObserver = new IntersectionObserver(
        setCurrent,
        observerOption
    );

    document
        .querySelectorAll("article :is(h2,h3,h4)")
        .forEach((heading) => headingObserver.observe(heading));
</script>
